{"version":3,"file":"useQueryIdFromDashboard.spec.js","names":["dataContainerListener","jest","fn","TestComponent","dashboardId","response","useQueryIdFromDashboard","afterEach","clearAllMocks","describe","it","render","waitFor","expect","toHaveBeenCalledWith","objectContaining","queryId","sdkMethodDashboardListener","toHaveBeenCalledTimes","byId","dashboardIdMap","modelExplore","slugIdMap","isOK","isPending","not","toHaveBeenCalled"],"sources":["../../../src/hooks/useQueryIdFromDashboard.spec.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { waitFor, render } from '@testing-library/react'\nimport { ContextWrapper, sdkMethodDashboardListener } from '../testUtils'\nimport { useQueryIdFromDashboard } from './useQueryIdFromDashboard'\n\n// mock to track results from front-end data store\nconst dataContainerListener = jest.fn()\n\ntype TestComponentProps = {\n  dashboardId?: number\n}\n\nconst TestComponent = ({ dashboardId = 1 }: TestComponentProps) => {\n  const response = useQueryIdFromDashboard(dashboardId)\n  dataContainerListener(response)\n  return null\n}\n\nafterEach(() => {\n  jest.clearAllMocks()\n})\n\ndescribe('useQueryIdFromDashboard', () => {\n  it('fetches query ID on mount', async () => {\n    render(\n      <ContextWrapper>\n        <TestComponent />\n      </ContextWrapper>\n    )\n    await waitFor(() =>\n      expect(dataContainerListener).toHaveBeenCalledWith(\n        expect.objectContaining({\n          queryId: 126,\n        })\n      )\n    )\n    expect(sdkMethodDashboardListener).toHaveBeenCalledTimes(1)\n  })\n\n  it('does not dispatch request if data already exists for given id', async () => {\n    render(\n      <ContextWrapper\n        initialState={{\n          byId: {},\n          dashboardIdMap: { 456: 789 },\n          modelExplore: {},\n          slugIdMap: {},\n        }}\n      >\n        <TestComponent dashboardId={456} />\n      </ContextWrapper>\n    )\n\n    await waitFor(() =>\n      expect(dataContainerListener).toHaveBeenCalledWith({\n        isOK: true,\n        isPending: false,\n        queryId: 789,\n      })\n    )\n\n    // important: assert that it was able to retrieve results without dispatching sdk request\n    expect(sdkMethodDashboardListener).not.toHaveBeenCalled()\n  })\n})\n"],"mappings":";;;;AAKA;AACA;AACA;AACA;;AAGA,IAAMA,qBAAqB,GAAGC,IAAI,CAACC,EAAE,EAAE;AAMvC,IAAMC,aAAa,GAAG,SAAhBA,aAAa,OAAgD;EAAA,4BAA1CC,WAAW;IAAXA,WAAW,iCAAG,CAAC;EACtC,IAAMC,QAAQ,GAAG,IAAAC,gDAAuB,EAACF,WAAW,CAAC;EACrDJ,qBAAqB,CAACK,QAAQ,CAAC;EAC/B,OAAO,IAAI;AACb,CAAC;AAEDE,SAAS,CAAC,YAAM;EACdN,IAAI,CAACO,aAAa,EAAE;AACtB,CAAC,CAAC;AAEFC,QAAQ,CAAC,yBAAyB,EAAE,YAAM;EACxCC,EAAE,CAAC,2BAA2B,6DAAE;IAAA;MAAA;QAAA;UAC9B,IAAAC,cAAM,EACJ,gCAAC,yBAAc,QACb,gCAAC,aAAa,OAAG,CACF,CAClB;UAAA;UAAA,OACK,IAAAC,eAAO,EAAC;YAAA,OACZC,MAAM,CAACb,qBAAqB,CAAC,CAACc,oBAAoB,CAChDD,MAAM,CAACE,gBAAgB,CAAC;cACtBC,OAAO,EAAE;YACX,CAAC,CAAC,CACH;UAAA,EACF;QAAA;UACDH,MAAM,CAACI,qCAA0B,CAAC,CAACC,qBAAqB,CAAC,CAAC,CAAC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CAC5D,GAAC;EAEFR,EAAE,CAAC,+DAA+D,6DAAE;IAAA;MAAA;QAAA;UAClE,IAAAC,cAAM,EACJ,gCAAC,yBAAc;YACb,YAAY,EAAE;cACZQ,IAAI,EAAE,CAAC,CAAC;cACRC,cAAc,EAAE;gBAAE,GAAG,EAAE;cAAI,CAAC;cAC5BC,YAAY,EAAE,CAAC,CAAC;cAChBC,SAAS,EAAE,CAAC;YACd;UAAE,GAEF,gCAAC,aAAa;YAAC,WAAW,EAAE;UAAI,EAAG,CACpB,CAClB;UAAA;UAAA,OAEK,IAAAV,eAAO,EAAC;YAAA,OACZC,MAAM,CAACb,qBAAqB,CAAC,CAACc,oBAAoB,CAAC;cACjDS,IAAI,EAAE,IAAI;cACVC,SAAS,EAAE,KAAK;cAChBR,OAAO,EAAE;YACX,CAAC,CAAC;UAAA,EACH;QAAA;UAGDH,MAAM,CAACI,qCAA0B,CAAC,CAACQ,GAAG,CAACC,gBAAgB,EAAE;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CAC1D,GAAC;AACJ,CAAC,CAAC"}
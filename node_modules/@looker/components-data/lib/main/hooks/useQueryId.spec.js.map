{"version":3,"file":"useQueryId.spec.js","names":["dataContainerListener","jest","fn","TestComponent","slug","response","useQueryId","afterEach","resetAllMocks","describe","it","render","waitFor","expect","sdkMethodQueryForSlugListener","toHaveBeenCalledTimes","toHaveBeenCalledWith","objectContaining","queryId","byId","dashboardIdMap","modelExplore","slugIdMap","qz123","isOK","isPending","not","toHaveBeenCalled"],"sources":["../../../src/hooks/useQueryId.spec.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { waitFor, render } from '@testing-library/react'\nimport { ContextWrapper, sdkMethodQueryForSlugListener } from '../testUtils'\nimport { useQueryId } from './useQueryId'\n\n// mock to track results from front-end data store\nconst dataContainerListener = jest.fn()\n\ntype TestComponentProps = {\n  slug?: string\n}\n\nconst TestComponent = ({ slug = 'qz123' }: TestComponentProps) => {\n  const response = useQueryId(slug)\n  dataContainerListener(response)\n  return null\n}\n\nafterEach(() => {\n  jest.resetAllMocks()\n})\n\ndescribe('useQueryId', () => {\n  it('fetches query id on mount', async () => {\n    render(\n      <ContextWrapper>\n        <TestComponent />\n      </ContextWrapper>\n    )\n\n    await waitFor(() => {\n      expect(sdkMethodQueryForSlugListener).toHaveBeenCalledTimes(1)\n    })\n\n    expect(dataContainerListener).toHaveBeenCalledWith(\n      expect.objectContaining({\n        queryId: 126,\n      })\n    )\n  })\n\n  it('does not dispatch request if data already exists for given id', async () => {\n    render(\n      <ContextWrapper\n        initialState={{\n          byId: {},\n          dashboardIdMap: {},\n          modelExplore: {},\n          slugIdMap: { qz123: 456 },\n        }}\n      >\n        <TestComponent slug={'qz123'} />\n      </ContextWrapper>\n    )\n\n    await waitFor(() =>\n      expect(dataContainerListener).toHaveBeenCalledWith({\n        isOK: true,\n        isPending: false,\n        queryId: 456,\n      })\n    )\n\n    // important: assert that it was able to retrieve results without dispatching sdk request\n    expect(sdkMethodQueryForSlugListener).not.toHaveBeenCalled()\n  })\n})\n"],"mappings":";;;;AAKA;AACA;AACA;AACA;;AAGA,IAAMA,qBAAqB,GAAGC,IAAI,CAACC,EAAE,EAAE;AAMvC,IAAMC,aAAa,GAAG,SAAhBA,aAAa,OAA+C;EAAA,qBAAzCC,IAAI;IAAJA,IAAI,0BAAG,OAAO;EACrC,IAAMC,QAAQ,GAAG,IAAAC,sBAAU,EAACF,IAAI,CAAC;EACjCJ,qBAAqB,CAACK,QAAQ,CAAC;EAC/B,OAAO,IAAI;AACb,CAAC;AAEDE,SAAS,CAAC,YAAM;EACdN,IAAI,CAACO,aAAa,EAAE;AACtB,CAAC,CAAC;AAEFC,QAAQ,CAAC,YAAY,EAAE,YAAM;EAC3BC,EAAE,CAAC,2BAA2B,6DAAE;IAAA;MAAA;QAAA;UAC9B,IAAAC,cAAM,EACJ,gCAAC,yBAAc,QACb,gCAAC,aAAa,OAAG,CACF,CAClB;UAAA;UAAA,OAEK,IAAAC,eAAO,EAAC,YAAM;YAClBC,MAAM,CAACC,wCAA6B,CAAC,CAACC,qBAAqB,CAAC,CAAC,CAAC;UAChE,CAAC,CAAC;QAAA;UAEFF,MAAM,CAACb,qBAAqB,CAAC,CAACgB,oBAAoB,CAChDH,MAAM,CAACI,gBAAgB,CAAC;YACtBC,OAAO,EAAE;UACX,CAAC,CAAC,CACH;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CACF,GAAC;EAEFR,EAAE,CAAC,+DAA+D,6DAAE;IAAA;MAAA;QAAA;UAClE,IAAAC,cAAM,EACJ,gCAAC,yBAAc;YACb,YAAY,EAAE;cACZQ,IAAI,EAAE,CAAC,CAAC;cACRC,cAAc,EAAE,CAAC,CAAC;cAClBC,YAAY,EAAE,CAAC,CAAC;cAChBC,SAAS,EAAE;gBAAEC,KAAK,EAAE;cAAI;YAC1B;UAAE,GAEF,gCAAC,aAAa;YAAC,IAAI,EAAE;UAAQ,EAAG,CACjB,CAClB;UAAA;UAAA,OAEK,IAAAX,eAAO,EAAC;YAAA,OACZC,MAAM,CAACb,qBAAqB,CAAC,CAACgB,oBAAoB,CAAC;cACjDQ,IAAI,EAAE,IAAI;cACVC,SAAS,EAAE,KAAK;cAChBP,OAAO,EAAE;YACX,CAAC,CAAC;UAAA,EACH;QAAA;UAGDL,MAAM,CAACC,wCAA6B,CAAC,CAACY,GAAG,CAACC,gBAAgB,EAAE;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CAC7D,GAAC;AACJ,CAAC,CAAC"}
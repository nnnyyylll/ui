{"version":3,"file":"useQueryId.spec.js","names":["React","waitFor","render","ContextWrapper","sdkMethodQueryForSlugListener","useQueryId","dataContainerListener","jest","fn","TestComponent","slug","response","afterEach","resetAllMocks","describe","it","expect","toHaveBeenCalledTimes","toHaveBeenCalledWith","objectContaining","queryId","byId","dashboardIdMap","modelExplore","slugIdMap","qz123","isOK","isPending","not","toHaveBeenCalled"],"sources":["../../../src/hooks/useQueryId.spec.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { waitFor, render } from '@testing-library/react'\nimport { ContextWrapper, sdkMethodQueryForSlugListener } from '../testUtils'\nimport { useQueryId } from './useQueryId'\n\n// mock to track results from front-end data store\nconst dataContainerListener = jest.fn()\n\ntype TestComponentProps = {\n  slug?: string\n}\n\nconst TestComponent = ({ slug = 'qz123' }: TestComponentProps) => {\n  const response = useQueryId(slug)\n  dataContainerListener(response)\n  return null\n}\n\nafterEach(() => {\n  jest.resetAllMocks()\n})\n\ndescribe('useQueryId', () => {\n  it('fetches query id on mount', async () => {\n    render(\n      <ContextWrapper>\n        <TestComponent />\n      </ContextWrapper>\n    )\n\n    await waitFor(() => {\n      expect(sdkMethodQueryForSlugListener).toHaveBeenCalledTimes(1)\n    })\n\n    expect(dataContainerListener).toHaveBeenCalledWith(\n      expect.objectContaining({\n        queryId: 126,\n      })\n    )\n  })\n\n  it('does not dispatch request if data already exists for given id', async () => {\n    render(\n      <ContextWrapper\n        initialState={{\n          byId: {},\n          dashboardIdMap: {},\n          modelExplore: {},\n          slugIdMap: { qz123: 456 },\n        }}\n      >\n        <TestComponent slug={'qz123'} />\n      </ContextWrapper>\n    )\n\n    await waitFor(() =>\n      expect(dataContainerListener).toHaveBeenCalledWith({\n        isOK: true,\n        isPending: false,\n        queryId: 456,\n      })\n    )\n\n    // important: assert that it was able to retrieve results without dispatching sdk request\n    expect(sdkMethodQueryForSlugListener).not.toHaveBeenCalled()\n  })\n})\n"],"mappings":";;AAKA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,EAAEC,MAAM,QAAQ,wBAAwB;AACxD,SAASC,cAAc,EAAEC,6BAA6B,QAAQ,cAAc;AAC5E,SAASC,UAAU,QAAQ,cAAc;;AAGzC,MAAMC,qBAAqB,GAAGC,IAAI,CAACC,EAAE,EAAE;AAMvC,MAAMC,aAAa,GAAG,CAAC;EAAEC,IAAI,EAAJA,KAAI,GAAG;AAA4B,CAAC,KAAK;EAChE,MAAMC,QAAQ,GAAGN,UAAU,CAACK,KAAI,CAAC;EACjCJ,qBAAqB,CAACK,QAAQ,CAAC;EAC/B,OAAO,IAAI;AACb,CAAC;AAEDC,SAAS,CAAC,MAAM;EACdL,IAAI,CAACM,aAAa,EAAE;AACtB,CAAC,CAAC;AAEFC,QAAQ,CAAC,YAAY,EAAE,MAAM;EAC3BC,EAAE,CAAC,2BAA2B,EAAE,YAAY;IAC1Cb,MAAM,CACJ,oBAAC,cAAc,QACb,oBAAC,aAAa,OAAG,CACF,CAClB;IAED,MAAMD,OAAO,CAAC,MAAM;MAClBe,MAAM,CAACZ,6BAA6B,CAAC,CAACa,qBAAqB,CAAC,CAAC,CAAC;IAChE,CAAC,CAAC;IAEFD,MAAM,CAACV,qBAAqB,CAAC,CAACY,oBAAoB,CAChDF,MAAM,CAACG,gBAAgB,CAAC;MACtBC,OAAO,EAAE;IACX,CAAC,CAAC,CACH;EACH,CAAC,CAAC;EAEFL,EAAE,CAAC,+DAA+D,EAAE,YAAY;IAC9Eb,MAAM,CACJ,oBAAC,cAAc;MACb,YAAY,EAAE;QACZmB,IAAI,EAAE,CAAC,CAAC;QACRC,cAAc,EAAE,CAAC,CAAC;QAClBC,YAAY,EAAE,CAAC,CAAC;QAChBC,SAAS,EAAE;UAAEC,KAAK,EAAE;QAAI;MAC1B;IAAE,GAEF,oBAAC,aAAa;MAAC,IAAI,EAAE;IAAQ,EAAG,CACjB,CAClB;IAED,MAAMxB,OAAO,CAAC,MACZe,MAAM,CAACV,qBAAqB,CAAC,CAACY,oBAAoB,CAAC;MACjDQ,IAAI,EAAE,IAAI;MACVC,SAAS,EAAE,KAAK;MAChBP,OAAO,EAAE;IACX,CAAC,CAAC,CACH;;IAGDJ,MAAM,CAACZ,6BAA6B,CAAC,CAACwB,GAAG,CAACC,gBAAgB,EAAE;EAC9D,CAAC,CAAC;AACJ,CAAC,CAAC"}
{"version":3,"file":"useQueryIdFromDashboard.spec.js","names":["React","waitFor","render","ContextWrapper","sdkMethodDashboardListener","useQueryIdFromDashboard","dataContainerListener","jest","fn","TestComponent","dashboardId","response","afterEach","clearAllMocks","describe","it","expect","toHaveBeenCalledWith","objectContaining","queryId","toHaveBeenCalledTimes","byId","dashboardIdMap","modelExplore","slugIdMap","isOK","isPending","not","toHaveBeenCalled"],"sources":["../../../src/hooks/useQueryIdFromDashboard.spec.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { waitFor, render } from '@testing-library/react'\nimport { ContextWrapper, sdkMethodDashboardListener } from '../testUtils'\nimport { useQueryIdFromDashboard } from './useQueryIdFromDashboard'\n\n// mock to track results from front-end data store\nconst dataContainerListener = jest.fn()\n\ntype TestComponentProps = {\n  dashboardId?: number\n}\n\nconst TestComponent = ({ dashboardId = 1 }: TestComponentProps) => {\n  const response = useQueryIdFromDashboard(dashboardId)\n  dataContainerListener(response)\n  return null\n}\n\nafterEach(() => {\n  jest.clearAllMocks()\n})\n\ndescribe('useQueryIdFromDashboard', () => {\n  it('fetches query ID on mount', async () => {\n    render(\n      <ContextWrapper>\n        <TestComponent />\n      </ContextWrapper>\n    )\n    await waitFor(() =>\n      expect(dataContainerListener).toHaveBeenCalledWith(\n        expect.objectContaining({\n          queryId: 126,\n        })\n      )\n    )\n    expect(sdkMethodDashboardListener).toHaveBeenCalledTimes(1)\n  })\n\n  it('does not dispatch request if data already exists for given id', async () => {\n    render(\n      <ContextWrapper\n        initialState={{\n          byId: {},\n          dashboardIdMap: { 456: 789 },\n          modelExplore: {},\n          slugIdMap: {},\n        }}\n      >\n        <TestComponent dashboardId={456} />\n      </ContextWrapper>\n    )\n\n    await waitFor(() =>\n      expect(dataContainerListener).toHaveBeenCalledWith({\n        isOK: true,\n        isPending: false,\n        queryId: 789,\n      })\n    )\n\n    // important: assert that it was able to retrieve results without dispatching sdk request\n    expect(sdkMethodDashboardListener).not.toHaveBeenCalled()\n  })\n})\n"],"mappings":";;AAKA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,EAAEC,MAAM,QAAQ,wBAAwB;AACxD,SAASC,cAAc,EAAEC,0BAA0B,QAAQ,cAAc;AACzE,SAASC,uBAAuB,QAAQ,2BAA2B;;AAGnE,MAAMC,qBAAqB,GAAGC,IAAI,CAACC,EAAE,EAAE;AAMvC,MAAMC,aAAa,GAAG,CAAC;EAAEC,WAAW,EAAXA,YAAW,GAAG;AAAsB,CAAC,KAAK;EACjE,MAAMC,QAAQ,GAAGN,uBAAuB,CAACK,YAAW,CAAC;EACrDJ,qBAAqB,CAACK,QAAQ,CAAC;EAC/B,OAAO,IAAI;AACb,CAAC;AAEDC,SAAS,CAAC,MAAM;EACdL,IAAI,CAACM,aAAa,EAAE;AACtB,CAAC,CAAC;AAEFC,QAAQ,CAAC,yBAAyB,EAAE,MAAM;EACxCC,EAAE,CAAC,2BAA2B,EAAE,YAAY;IAC1Cb,MAAM,CACJ,oBAAC,cAAc,QACb,oBAAC,aAAa,OAAG,CACF,CAClB;IACD,MAAMD,OAAO,CAAC,MACZe,MAAM,CAACV,qBAAqB,CAAC,CAACW,oBAAoB,CAChDD,MAAM,CAACE,gBAAgB,CAAC;MACtBC,OAAO,EAAE;IACX,CAAC,CAAC,CACH,CACF;IACDH,MAAM,CAACZ,0BAA0B,CAAC,CAACgB,qBAAqB,CAAC,CAAC,CAAC;EAC7D,CAAC,CAAC;EAEFL,EAAE,CAAC,+DAA+D,EAAE,YAAY;IAC9Eb,MAAM,CACJ,oBAAC,cAAc;MACb,YAAY,EAAE;QACZmB,IAAI,EAAE,CAAC,CAAC;QACRC,cAAc,EAAE;UAAE,GAAG,EAAE;QAAI,CAAC;QAC5BC,YAAY,EAAE,CAAC,CAAC;QAChBC,SAAS,EAAE,CAAC;MACd;IAAE,GAEF,oBAAC,aAAa;MAAC,WAAW,EAAE;IAAI,EAAG,CACpB,CAClB;IAED,MAAMvB,OAAO,CAAC,MACZe,MAAM,CAACV,qBAAqB,CAAC,CAACW,oBAAoB,CAAC;MACjDQ,IAAI,EAAE,IAAI;MACVC,SAAS,EAAE,KAAK;MAChBP,OAAO,EAAE;IACX,CAAC,CAAC,CACH;;IAGDH,MAAM,CAACZ,0BAA0B,CAAC,CAACuB,GAAG,CAACC,gBAAgB,EAAE;EAC3D,CAAC,CAAC;AACJ,CAAC,CAAC"}
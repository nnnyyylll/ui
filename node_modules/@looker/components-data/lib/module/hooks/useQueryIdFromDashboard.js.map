{"version":3,"file":"useQueryIdFromDashboard.js","names":["useEffect","useSWR","getErrorResponse","DataState","useSDK","useQueryIdFromDashboard","dashboardId","sdk","getIdFromDashboard","setByDashboardId","useContainer","queryId","fetcher","dashboard","String","undefined","data","SWRData","isValidating","revalidateOnFocus","firstTile","ok","value","dashboard_elements","query","id","Number","metadata","isOK","isPending"],"sources":["../../../src/hooks/useQueryIdFromDashboard.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { useEffect } from 'react'\nimport type { IDashboard, IError, IQuery } from '@looker/sdk'\nimport type { SDKResponse } from '@looker/sdk-rtl'\nimport useSWR from 'swr'\nimport { getErrorResponse } from '../utils'\nimport { DataState } from './useDataState'\nimport { useSDK } from './useSDK'\n\n/**\n * This hook fetches data from provided dashboard Id, and returns\n * the first query listed in `dashboard_elements` response.\n *\n * @param dashboardId a numeric dashboard Id\n * @returns the query ID associated with the first dashboard tile, and api state\n */\n\nexport const useQueryIdFromDashboard = (dashboardId?: number) => {\n  const sdk = useSDK()\n  const { getIdFromDashboard, setByDashboardId } = DataState.useContainer()\n\n  /*\n   * Check for stored value\n   * -----------------------------------------------------------\n   */\n\n  const queryId = getIdFromDashboard(dashboardId)\n\n  /*\n   * Dispatch network request\n   * -----------------------------------------------------------\n   */\n\n  const fetcher = async () => {\n    if (dashboardId && !queryId) {\n      return await sdk.dashboard(String(dashboardId), 'dashboard_elements')\n    }\n\n    return undefined\n  }\n\n  const { data: SWRData, isValidating } = useSWR<void | SDKResponse<\n    IDashboard,\n    IError\n  >>(\n    `useQueryIdFromDashboard-${dashboardId}`, // caution: argument string must be unique to this instance\n    fetcher,\n    { revalidateOnFocus: false }\n  )\n\n  /*\n   * Publish SWR response to central data store\n   * -----------------------------------------------------------\n   */\n\n  useEffect(() => {\n    const firstTile = SWRData?.ok\n      ? SWRData?.value?.dashboard_elements?.[0]?.query\n      : undefined\n\n    const { id, ...query } = firstTile || ({} as IQuery)\n\n    if (dashboardId && id && Number(id) !== queryId) {\n      setByDashboardId(dashboardId, Number(id), { metadata: query })\n    }\n  }, [SWRData, dashboardId, setByDashboardId, queryId])\n\n  return {\n    isOK: !!queryId || typeof dashboardId === 'undefined',\n    isPending: isValidating,\n    queryId,\n    ...getErrorResponse(SWRData),\n  }\n}\n"],"mappings":";;;;;;AAKA,SAASA,SAAS,QAAQ,OAAO;AAGjC,OAAOC,MAAM,MAAM,KAAK;AACxB,SAASC,gBAAgB,QAAQ,UAAU;AAC3C,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,MAAM,QAAQ,UAAU;;AAUjC,OAAO,MAAMC,uBAAuB,GAAIC,WAAoB,IAAK;EAC/D,MAAMC,GAAG,GAAGH,MAAM,EAAE;EACpB,MAAM;IAAEI,kBAAkB;IAAEC;EAAiB,CAAC,GAAGN,SAAS,CAACO,YAAY,EAAE;;EAOzE,MAAMC,OAAO,GAAGH,kBAAkB,CAACF,WAAW,CAAC;;EAO/C,MAAMM,OAAO,GAAG,YAAY;IAC1B,IAAIN,WAAW,IAAI,CAACK,OAAO,EAAE;MAC3B,OAAO,MAAMJ,GAAG,CAACM,SAAS,CAACC,MAAM,CAACR,WAAW,CAAC,EAAE,oBAAoB,CAAC;IACvE;IAEA,OAAOS,SAAS;EAClB,CAAC;EAED,MAAM;IAAEC,IAAI,EAAEC,OAAO;IAAEC;EAAa,CAAC,GAAGjB,MAAM,CAI3C,2BAA0BK,WAAY,EAAC;EACxCM,OAAO,EACP;IAAEO,iBAAiB,EAAE;EAAM,CAAC,CAC7B;;EAODnB,SAAS,CAAC,MAAM;IAAA;IACd,MAAMoB,SAAS,GAAGH,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEI,EAAE,GACzBJ,OAAO,aAAPA,OAAO,yCAAPA,OAAO,CAAEK,KAAK,4EAAd,eAAgBC,kBAAkB,oFAAlC,sBAAqC,CAAC,CAAC,2DAAvC,uBAAyCC,KAAK,GAC9CT,SAAS;IAEb,aAAyBK,SAAS,IAAK,CAAC,CAAY;MAA9C;QAAEK;MAAa,CAAC;MAAPD,KAAK;IAEpB,IAAIlB,WAAW,IAAImB,EAAE,IAAIC,MAAM,CAACD,EAAE,CAAC,KAAKd,OAAO,EAAE;MAC/CF,gBAAgB,CAACH,WAAW,EAAEoB,MAAM,CAACD,EAAE,CAAC,EAAE;QAAEE,QAAQ,EAAEH;MAAM,CAAC,CAAC;IAChE;EACF,CAAC,EAAE,CAACP,OAAO,EAAEX,WAAW,EAAEG,gBAAgB,EAAEE,OAAO,CAAC,CAAC;EAErD;IACEiB,IAAI,EAAE,CAAC,CAACjB,OAAO,IAAI,OAAOL,WAAW,KAAK,WAAW;IACrDuB,SAAS,EAAEX,YAAY;IACvBP;EAAO,GACJT,gBAAgB,CAACe,OAAO,CAAC;AAEhC,CAAC"}